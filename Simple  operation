#define _CRT_SECURE_NO_WARNINGS 1 //这个是高版的VS默认不让使用scanf,fopen等函数,说是scanf,fopen等函数不安全,而代替其函数的是scanf_s,fopen_s等函数,后边有个"_s"的形式
#include<stdio.h> //定义输入输出函数

//输出的基本格式(快捷键ctrl+f5/ctrl+fn+f5)
int main()
{
    int a =100;
    printf("a=%d\n",a);
    return 0;
}


//简单的加法 (注意这串代码当你运行后可能会出现没有结果，此时你要将你的加数打入调试控制台并以空格隔开)
int main()
{
    int num1 =1;
    int num2 =2;
    
    scanf("%d %d",&num1,&num2); //注意这里一定有两个&，并且两个%d之间没有逗号 意思是先输入一个数字，然后加一个空格，再输入一个数字  scanf_f只能被VS(Visual Studio)认识
    
    int sum = num1+num2;
    
    printf("sum=%d",sum);
    
    return 0;
}








//变量的作用域(作用范围)  分为 局部 全局(变量的作用范围是整个工程)
//全局中的函数调用
int a=10;
void test()
{
    printf("test-->%d\n",a);
}
int main()
{
    test();//函数的调用
    {
    printf("a=%d\n",a);
    }
    printf("a=%d\n",a);
    return 0;
}

//声明来自外部的变量，即两个页面的代码
int a = 10;//此处的代码来自外部
extern int a;//此处代码在内部，放在主函数的外面

//变量生命周期
//局部变量
//进入作用域开始，出去作用域结束
//全局变量
//伴随着整个程序的生命周期








//常量
//字面常量 (30;3.14;'w'(字符)；'abc'(字符串))
//const修饰的常变量  
#include <stdio.h>
int main()
{
    const int a =10;//加上const以后"本来a=20可以被执行并且输出结果a也从10被改成20"现在程序会报错不让你运行即改不了a=10;const修饰a 本质是变量但不能被修改，有常量的属性;本质是变量，即被锁定的变量
    a=20;
    printf("%d\n",a);
    return 0;
}

//define 定义的标识符常量
例如
#define MAX 100
#define STR "abcdef"
int main()
{
    printf("%d\n",MAX);//输出结果为100
    int a =100;
    printf("%d\n",a);//输出结果为100\n100
    printf("%s\n",STR);
    MAX =200;//err
}

//枚举常量(如三原色，性别)
enum Color
{
    RED,
    GREEN,
    BLUE
};

int main()
{
    enum c =RED;
    RED=10;//err
    return 0;
}








//字符
'a' 字符常量
char ch ='w';字符常量放入变量
"abcdef" 字符串
//数组的初步应用，为了证明\0的存在和意义
char arr1[]="abcdef";//7  其中隐藏了\0，相当于遇到了一个终止命令，即结束命令(ta是一个转义字符，占据一个字节，但不算作字符串内容)
char arr2[]={'a','b','c','d','e','f'};
printf("%s\n",arr1);//输出结果为abcdef

//若此处代码有效--> char arr2[]={'a','b','c','d','e','f','\0'};  则下方第一个*printf结果为abcdef，第二个*printf结果为6 即数出了\0前面的长度

*printf("%s\n",arr2);//正常情况下不会输出abcdef因为字符不带有\0；
诸如 abcdef烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫慂?? 等输出结果

//相关库函数strlen()的运用，得包含头文件string.h
int len =strlen("abc");
printf("%d\n",len);//结果为3
printf("%d\n",strlen(arr1));//6
*printf("%d\n",strlen(arr2));//随机数，根据电脑不同输出

//转义字符(转变原来字符的意思)
//初步了解
int main()
{
    printf("abcn");//在这里改成printf("abc\n");字符的意义将被改变
    return 0;
)
}

int main()
{
    printf("abc0def");//改成printf("abc\odef");同理意义也被改变
}

//举例
//  \?    三子母词语 ??) --> ]; ??( --> [
//  \'    单单打印一个 '
//  \"
//  \\    前面一个\是用来转义后面一个\的，如\\0输出的结果为\0，即将原本\0是终止的意义失效而变成单纯的\和0输出
//  \t    table 即一个    空格
//  \a    触发电脑的蜂鸣器
//  \n    换行
//  \r    回车
//  \ddd  其中的d组合成的数字为八进制数字
//  \xdd  在\x后面的d组合成的数字为十六进制数字


//练习
//printf("%d",strlen("c:\test\628\test.c"));//输出结果为14







//注释
// /*C语言风格注释          //早期C语言的注释
   int Sub(int x, int y)
   {
       return x-y;
   }
   */                     //遇到 * 之后注释就已经结束了，所以多个注释嵌套不成立，这也是其缺点


